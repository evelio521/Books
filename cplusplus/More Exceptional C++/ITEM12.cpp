ITEM12:内联
	//1.inline有什么作用
	 
	  //将一个函数说明为inline意味着告诉编译器:编译器可以将
	  //这个函数代码拷贝直接在每一个使用这个函数的地方，编译
	  //器可以这么做也可以不这么做。
	 
	//2.将函数内联会提高效率吗？
    
    //不一定
    
    //效率值指的是什么
      1.程序体积
        //内联不一定使代码体积变大，也可能使其减少
      2.内存占用
        //内联除了对代码体积有可能有影响外，基本对内存使用没影响
      3.执行时间
        //如果不是被声明为内联的函数平凡调用，对代码的执行时间没有影响
      4.开发速度和编译时间
        //普通函数修改时，调用者无需重新编译，只需要重新连接
        //而内联函数必须重新编译，会增大编译时间。会在调试期影响开发速度
    //3.何时决定使用内联函数？如何确定？
      
      //除非你确定应该使用内联函数，否则尽量不要使用它
      //空函数应该设计为内联，只要该函数一直保持为空
      
      //所有被内联代码会增加耦合性，只要增加耦合性，内联总是会带来成本，绝对不要为某个东西先支付
      //成本，除非你知道他带来好处--也就是回报大于支出
      
      //在性能分析证明确实必要之前，避免内联或详细优化